{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","state/app-reducer.ts","Task.tsx","state/tasks-reducer.ts","state/thunksUtils/errorHandlers.ts","state/thunks/tasks-thunks.ts","Todolist.tsx","state/todolists-reducer.ts","components/ErrorSnackBar.tsx","state/auth-reducer.ts","login/Login.tsx","state/thunks/auth-thunks.ts","state/thunks/app-thunks.ts","components/AppBarComponent.tsx","AppWithRedux.tsx","state/thunks/todolist-thunks.ts","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","disabled","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","AppConsts","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","Checkbox","Delete","initialState","isInitialized","setAppStatus","type","SET_STATUS","setAppError","SET_ERROR","thunkErrorHandler","dispatch","messages","length","thunkServerErrorHandler","err","message","UpdateTaskThunk","getState","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","item","catch","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","useDispatch","useEffect","setTaskAC","items","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","changeTodoListEntityAC","Alert","elevation","ErrorSnackbar","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AuthConsts","isLoggedIn","setIsLoggedIn","IS_LOGGED_IN","validationSchema","yup","shape","email","max","required","password","min","Login","auth","formik","useFormik","initialValues","rememberMe","onSubmit","values","errorStyle","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","name","getFieldProps","errors","touched","FormControlLabel","control","initializeAppThunk","SET_IS_INITIALIZED","AppBarComponent","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","AppWithRedux","todolists","isInitializedApp","removeTaskAC","deleteTaskThunk","cteateTaskThunk","changeStatus","newTitle","action","removeTodolistAC","changeTodolistTitleAC","updateTitleTodoListThunk","addTodolist","a","todolist","createTodoListThunk","LinearProgress","path","render","exact","Container","fixed","padding","spacing","tl","allTodolistTasks","Paper","CircularProgress","rootReducer","combineReducers","stateCopy","newTasks","newTask","todoListId","todolistTasks","newTasksArray","copyState","forEach","newTodolist","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1d6bd60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data:LoginType){\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    auth(){\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType<{}>>('auth/login')\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled = false, ...props}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","enum AppConsts {\r\n    SET_STATUS = 'APP/SET_STATUS',\r\n    SET_ERROR = 'APP/SET_ERROR',\r\n    SET_IS_INITIALIZED = 'APP/IS_INITIALIZED',\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsAppType): InitialStateType => {\r\n    switch (action.type) {\r\n        case AppConsts.SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case AppConsts.SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case AppConsts.SET_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionsAppType = ReturnType<typeof setAppStatus> |\r\n    ReturnType<typeof setAppError> |\r\n    ReturnType<typeof setIsInitialized>\r\n\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: AppConsts.SET_STATUS, status} as const)\r\nexport const setAppError = (error: string | null) => ({type: AppConsts.SET_ERROR, error} as const)\r\nexport const setIsInitialized = (value: boolean) => ({type: AppConsts.SET_IS_INITIALIZED, value} as const)","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType} from './todolists-reducer';\r\nimport {TaskType} from '../api/todolists-api'\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n    task: TaskType\r\n}\r\nexport type SetTaskActionType = {\r\n    type: 'SET_TASKS'\r\n    todolistId: string\r\n    tasks: TaskType[]\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistActionType\r\n    | SetTaskActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[newTask.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map((t) => t.id === action.taskId ? {...action.task} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case \"SET_TASKS\":\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (taskId: string, todolistId: string, task: TaskType): UpdateTaskActionType => {\r\n    return {type: 'UPDATE-TASK', task, todolistId, taskId}\r\n}\r\nexport const setTaskAC = (tasks: TaskType[], todolistId: string): SetTaskActionType => {\r\n    return {type: 'SET_TASKS',tasks, todolistId}\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {ResponseType} from '../../api/todolists-api';\r\nimport {ActionsAppType, setAppError, setAppStatus} from '../app-reducer';\r\nimport {ActionsAuthType} from \"../auth-reducer\";\r\n\r\nexport const thunkErrorHandler = <T>(data: ResponseType<T>, dispatch: Dispatch<ActionsAppType | ActionsAuthType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('some error'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\n\r\nexport const thunkServerErrorHandler = (err: { message: string }, dispatch: Dispatch<ActionsAppType | ActionsAuthType>) => {\r\n    if (err.message) {\r\n        dispatch(setAppError(err.message))\r\n    } else {\r\n        dispatch(setAppError('some error was happened'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {addTaskAC, removeTaskAC, setTaskAC, updateTaskAC} from \"../tasks-reducer\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {setAppError, setAppStatus} from \"../app-reducer\";\r\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\r\n\r\ntype SetTasksThunkType = (todolistId: string) => Function\r\ntype CreateTasksThunkType = (title: string, todolistId: string) => Function\r\ntype DeleteTasksThunkType = (todolistId: string, taskId: string) => Function\r\ntype UpdateTitleTaskThunkType = (taskId: string, todolistId: string, model: UpdateTaskDomainModelType) => Function\r\n\r\nexport const setTasksThunk: SetTasksThunkType = (todolistId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTaskAC(res.data.items, todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                if (err.message) {\r\n                    dispatch(setAppError(err.message))\r\n                } else {\r\n                    dispatch(setAppError(err))\r\n                }\r\n                dispatch(setAppStatus('failed'))\r\n            })\r\n    }\r\n}\r\nexport const cteateTaskThunk: CreateTasksThunkType = (title, todolistId) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const deleteTaskThunk: DeleteTasksThunkType = (todolistId, taskId) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todolistId))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport type UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const UpdateTaskThunk: UpdateTitleTaskThunkType = (todolistId, taskId, model) => {\r\n\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n\r\n        const task = state.tasks[todolistId].find((t) => t.id === taskId)\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                title: task.title,\r\n                ...model\r\n            }\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, todolistId, res.data.data.item))\r\n                        setAppStatus('succeeded')\r\n                    } else {\r\n                        thunkErrorHandler(res.data,dispatch)\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    thunkServerErrorHandler(err, dispatch)\r\n                })\r\n        }\r\n\r\n\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksThunk} from \"./state/thunks/tasks-thunks\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\n\r\ntype PropsType = {\r\n    entityStatus:RequestStatusType\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo=false,...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(demo){\r\n            return\r\n        }\r\n        dispatch(setTasksThunk(props.id))\r\n    },[props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={(props.entityStatus === 'loading') && true}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {TodolistType} from '../api/todolists-api'\r\nimport {RequestStatusType} from \"./app-reducer\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistActionType = {\r\n    type: 'SET_TODOLISTS',\r\n    todolists: TodolistType[]\r\n}\r\nexport type ChangeTodoListActionType = {\r\n    type: 'CHANGE_TODOLIST_ENTITY_STATUS',\r\n    entityStatus: RequestStatusType\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistActionType\r\n    | ChangeTodoListActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n           let newTodolist:TodolistDomainType = {...action.todolist, filter: \"all\", entityStatus: \"idle\"}\r\n           return [newTodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET_TODOLISTS\":\r\n            return action.todolists.map(tl => {\r\n                return {...tl, filter: \"all\", entityStatus: \"idle\"}\r\n            })\r\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\":\r\n            return state.map((tl) =>tl.id === action.todolistId ? {...tl, entityStatus:action.entityStatus}: tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodolistAC = (todolists: TodolistType[]): SetTodolistActionType => {\r\n    return {type: \"SET_TODOLISTS\", todolists}\r\n}\r\nexport const changeTodoListEntityAC = (entityStatus: RequestStatusType, todolistId: string):ChangeTodoListActionType => {\r\n    return {type: \"CHANGE_TODOLIST_ENTITY_STATUS\", entityStatus, todolistId}\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setAppError} from \"../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","enum AuthConsts {\r\n    IS_LOGGED_IN = 'AUTH/IS_LOGGED_IN',\r\n}\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: InitialAuthStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsAuthType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case AuthConsts.IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionsAuthType = ReturnType<typeof setIsLoggedIn>\r\n\r\n\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: AuthConsts.IS_LOGGED_IN, isLoggedIn} as const)","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport * as yup from 'yup';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../state/thunks/auth-thunks\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\ntype LoginPropsType = {}\r\n\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .max(35, 'Must be 25 characters or less')\r\n        .required('email is required')\r\n        .email('email is incorrect'),\r\n    password: yup.string()\r\n        .max(25, 'Must be 25 characters or less')\r\n        .min(5, 'Must be 5 characters or more')\r\n        .required('password is required'),\r\n});\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        validationSchema,\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginThunk(values));\r\n        },\r\n    });\r\n\r\n    const errorStyle = {\r\n        color: 'red',\r\n    }\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name={'email'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email ? (\r\n                            <div style={errorStyle}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password ? (\r\n                            <div style={errorStyle}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            name={'rememberMe'}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginType} from \"../../api/todolists-api\";\r\nimport {ActionsAuthType, setIsLoggedIn} from \"../auth-reducer\";\r\nimport {ActionsAppType, setAppError, setAppStatus, setIsInitialized} from \"../app-reducer\";\r\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\r\n\r\n\r\nexport const loginThunk = (data: LoginType) => {\r\n\r\n    return (dispatch: Dispatch<ActionsAuthType | ActionsAppType>) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        authAPI.login(data)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(true))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const logOutThunk = () => {\r\n\r\n    return (dispatch: Dispatch<ActionsAuthType | ActionsAppType>) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        authAPI.logOut()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(false))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}","import {authAPI, LoginType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsAuthType, setIsLoggedIn} from \"../auth-reducer\";\r\nimport {ActionsAppType, setAppStatus, setIsInitialized} from \"../app-reducer\";\r\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\r\n\r\n//check your authorization\r\nexport const initializeAppThunk = () => {\r\n\r\n    return (dispatch: Dispatch<ActionsAuthType | ActionsAppType>) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        authAPI.auth()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(true))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n                dispatch(setIsInitialized(true))\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback} from 'react'\r\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {logOutThunk} from \"../state/thunks/auth-thunks\";\r\n\r\n\r\nexport function AppBarComponent() {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutThunk())\r\n    }, [])\r\n\r\n    return <AppBar position=\"static\">\r\n        <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n                News\r\n            </Typography>\r\n            {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {CircularProgress, Container, Grid, LinearProgress, Paper} from '@material-ui/core';\r\nimport {changeTodolistFilterAC, FilterValuesType, TodolistDomainType} from './state/todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {\r\n    createTodoListThunk,\r\n    deleteTodoListThunk,\r\n    setTodoListThunk,\r\n    updateTitleTodoListThunk\r\n} from \"./state/thunks/todolist-thunks\";\r\nimport {cteateTaskThunk, deleteTaskThunk, UpdateTaskThunk} from \"./state/thunks/tasks-thunks\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackBar\";\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport {Login} from \"./login/Login\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {initializeAppThunk} from './state/thunks/app-thunks';\r\nimport {AppBarComponent} from \"./components/AppBarComponent\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function AppWithRedux({demo = false, ...props}: AppPropsType) {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state: AppRootStateType) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitializedApp = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTodoListThunk())\r\n    }, [isLoggedIn])\r\n\r\n    //for initialization\r\n    useEffect(() => {\r\n        dispatch(initializeAppThunk())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTaskThunk(todolistId, id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(cteateTaskThunk(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(UpdateTaskThunk(todolistId, id, {status}));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(UpdateTaskThunk(todolistId, id, {title: newTitle}));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodoListThunk(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTitleTodoListThunk(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodoListThunk(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isInitializedApp) {\r\n        return <div className={'app__progress_circle'}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBarComponent />\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <ErrorSnackbar/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n            {\r\n                !isLoggedIn && <Redirect to={'/login'}/>\r\n            }\r\n            <Route exact path={'/'} render={() => <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        entityStatus={tl.entityStatus}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import {todolistsAPI} from \"../../api/todolists-api\";\nimport {\n    addTodolistAC,\n    changeTodoListEntityAC,\n    changeTodolistTitleAC,\n    removeTodolistAC,\n    setTodolistAC\n} from \"../todolists-reducer\";\nimport {Dispatch} from \"redux\";\nimport {setAppError, setAppStatus} from \"../app-reducer\";\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\n\ntype SetTodoListThunkType = () => Function\ntype DeleteTodoListThunkType = (todolistId: string) => Function\ntype CreateTodoListThunkType = (title: string) => Function\ntype UpdateTitleTodoListThunkType = (todolistId: string, title: string) => Function\n\nexport const setTodoListThunk: SetTodoListThunkType = () => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatus(\"loading\"))\n        todolistsAPI.getTodolists()\n            .then(res => {\n                dispatch(setTodolistAC(res.data))\n                dispatch(setAppStatus(\"succeeded\"))\n            })\n            .catch((err) => {\n                thunkServerErrorHandler(err, dispatch)\n            })\n    }\n}\n\nexport const deleteTodoListThunk: DeleteTodoListThunkType = (todolistId) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatus(\"loading\"))\n        dispatch(changeTodoListEntityAC(\"loading\", todolistId))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(removeTodolistAC(todolistId))\n                    dispatch(setAppStatus(\"succeeded\"))\n                } else {\n                    thunkErrorHandler(res.data, dispatch)\n                }\n            })\n            .catch(err => {\n                thunkServerErrorHandler(err, dispatch)\n            })\n\n    }\n}\nexport const createTodoListThunk: CreateTodoListThunkType = (title) => {\n\n    return async (dispatch: Dispatch) => {\n        try {\n            dispatch(setAppStatus(\"loading\"))\n            let res = await todolistsAPI.createTodolist(title)\n                .then(res => {\n                    dispatch(changeTodoListEntityAC(\"loading\", res.data.data.item.id))\n                    if (res.data.resultCode === 0) {\n                        dispatch(addTodolistAC(res.data.data.item))\n                        dispatch(setAppStatus(\"succeeded\"))\n                    } else {\n                        thunkErrorHandler(res.data, dispatch)\n                    }\n                })\n        } catch (err) {\n            thunkServerErrorHandler(err, dispatch)\n        }\n    }\n}\nexport const updateTitleTodoListThunk: UpdateTitleTodoListThunkType = (todolistId, title) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatus(\"loading\"))\n        todolistsAPI.updateTodolist(todolistId, title)\n            .then(res => {\n                dispatch(changeTodolistTitleAC(todolistId, title))\n            })\n    }\n}","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}