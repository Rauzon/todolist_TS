{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","state/app-reducer.ts","state/thunksUtils/errorHandlers.ts","state/thunks/tasks-thunks.ts","Todolist.tsx","components/ErrorSnackBar.tsx","state/auth-reducer.ts","login/Login.tsx","state/thunks/auth-thunks.ts","components/AppBarComponent.tsx","AppWithRedux.tsx","state/thunks/todolist-thunks.ts","state/thunks/app-thunks.ts","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","disabled","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","Checkbox","Delete","todolistsSlice","createSlice","name","initialState","reducers","removeTodolistAC","state","action","index","findIndex","tl","payload","splice","addTodolistAC","newTodolist","todolist","filter","entityStatus","unshift","changeTodolistTitleAC","find","changeTodolistFilterAC","setTodolistAC","todolists","map","changeTodoListEntityAC","todolistsReducer","reducer","actions","tasksSlice","removeTaskAC","tasks","t","addTaskAC","todoListId","updateTaskAC","todolistTasks","setTaskAC","extraReducers","type","forEach","tasksReducer","appSlice","isInitialized","setAppStatus","setAppError","setIsInitialized","appReducer","thunkErrorHandler","dispatch","messages","length","thunkServerErrorHandler","err","message","UpdateTaskThunk","getState","apiModel","deadline","description","priority","startDate","then","res","resultCode","item","catch","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","useDispatch","useEffect","items","tasksForTodolist","removeTodolist","style","paddingTop","Button","Alert","elevation","ErrorSnackbar","useSelector","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","authSlice","isLoggedIn","setIsLoggedIn","authReducer","validationSchema","yup","shape","email","max","required","password","min","Login","auth","formik","useFormik","initialValues","rememberMe","onSubmit","values","errorStyle","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","touched","FormControlLabel","control","AppBarComponent","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","AppWithRedux","isInitializedApp","deleteTaskThunk","cteateTaskThunk","changeStatus","newTitle","updateTitleTodoListThunk","addTodolist","a","createTodoListThunk","LinearProgress","path","render","exact","Container","fixed","padding","spacing","allTodolistTasks","Paper","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a357e61b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '959808d3-8efe-42bd-88eb-3693675e6c98'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data:LoginType){\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    auth(){\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType<{}>>('auth/login')\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled = false, ...props}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TodolistType} from '../api/todolists-api'\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistsSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            let newTodolist: TodolistDomainType = {...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"}\r\n            state.unshift(newTodolist)\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const todolist = state.find(tl => tl.id === action.payload.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.payload.title;\r\n            }\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const todolist = state.find(tl => tl.id === action.payload.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.payload.filter;\r\n            }\r\n        },\r\n        setTodolistAC(state, action: PayloadAction<{ todolists: TodolistType[] }>) {\r\n            return action.payload.todolists.map(tl => {\r\n                return {...tl, filter: \"all\", entityStatus: \"idle\"}\r\n            })\r\n        },\r\n        changeTodoListEntityAC(state, action: PayloadAction<{ entityStatus: RequestStatusType, todolistId: string }>) {\r\n            return state.map((tl) => tl.id === action.payload.todolistId ?\r\n                {...tl, entityStatus: action.payload.entityStatus} : tl)\r\n        },\r\n    }\r\n});\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todolistsReducer = todolistsSlice.reducer;\r\n\r\nexport const {\r\n    addTodolistAC,\r\n    changeTodoListEntityAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodolistAC\r\n} = todolistsSlice.actions","import {TasksStateType} from '../App';\r\nimport {addTodolistAC, removeTodolistAC, setTodolistAC} from './todolists-reducer';\r\nimport {TaskType, TodolistType, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ todolistId: string, taskId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ task: TaskType, taskId: string, todolistId: string }>) {\r\n            let todolistTasks = state[action.payload.todolistId];\r\n            // найдём нужную таску:\r\n            const index = todolistTasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                todolistTasks[index] = {...todolistTasks[index], ...action.payload.task}\r\n            }\r\n        },\r\n        setTaskAC(state, action: PayloadAction<{ todolistId: string, tasks: TaskType[] }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [removeTodolistAC.type]: (state, action: PayloadAction<{ todolistId: string }>) => {\r\n            delete state[action.payload.todolistId];\r\n        },\r\n        [addTodolistAC.type]: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state[action.payload.todolist.id] = []\r\n        },\r\n        [setTodolistAC.type]: (state, action: PayloadAction<{ todolists: TodolistType[] }>) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        },\r\n    }\r\n});\r\n\r\nexport const tasksReducer = tasksSlice.reducer\r\n\r\nexport const {addTaskAC, removeTaskAC, setTaskAC, updateTaskAC} = tasksSlice.actions","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n};\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialized(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n    }\r\n});\r\nexport const appReducer = appSlice.reducer;\r\n\r\nexport const {setAppStatus, setAppError, setIsInitialized} = appSlice.actions;\r\n","import {Dispatch} from \"redux\";\r\nimport {ResponseType} from '../../api/todolists-api';\r\nimport {setAppError, setAppStatus} from '../app-reducer';\r\n\r\nexport const thunkErrorHandler = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'some error'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\n\r\nexport const thunkServerErrorHandler = (err: { message: string }, dispatch: Dispatch) => {\r\n    if (err.message) {\r\n        dispatch(setAppError({error: err.message}))\r\n    } else {\r\n        dispatch(setAppError({error: 'some error was happened'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {addTaskAC, removeTaskAC, setTaskAC, updateTaskAC} from \"../tasks-reducer\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {setAppError, setAppStatus} from \"../app-reducer\";\r\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\r\n\r\ntype SetTasksThunkType = (todolistId: string) => Function\r\ntype CreateTasksThunkType = (title: string, todolistId: string) => Function\r\ntype DeleteTasksThunkType = (todolistId: string, taskId: string) => Function\r\ntype UpdateTitleTaskThunkType = (taskId: string, todolistId: string, model: UpdateTaskDomainModelType) => Function\r\n\r\nexport const setTasksThunk: SetTasksThunkType = (todolistId) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTaskAC({todolistId: todolistId, tasks: res.data.items}))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            })\r\n            .catch(err => {\r\n                if (err.message) {\r\n                    dispatch(setAppError(err.message))\r\n                } else {\r\n                    dispatch(setAppError(err))\r\n                }\r\n                dispatch(setAppStatus({status: 'failed'}))\r\n            })\r\n    }\r\n}\r\nexport const cteateTaskThunk: CreateTasksThunkType = (title, todolistId) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC({task: res.data.data.item}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const deleteTaskThunk: DeleteTasksThunkType = (todolistId, taskId) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC({todolistId: todolistId, taskId: taskId}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport type UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const UpdateTaskThunk: UpdateTitleTaskThunkType = (todolistId, taskId, model) => {\r\n\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n\r\n        const task = state.tasks[todolistId].find((t) => t.id === taskId)\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                title: task.title,\r\n                ...model\r\n            }\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC({taskId, todolistId, task: res.data.data.item}))\r\n                        setAppStatus({status: 'succeeded'})\r\n                    } else {\r\n                        thunkErrorHandler(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    thunkServerErrorHandler(err, dispatch)\r\n                })\r\n        }\r\n\r\n\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksThunk} from \"./state/thunks/tasks-thunks\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\n\r\ntype PropsType = {\r\n    entityStatus:RequestStatusType\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo=false,...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(demo){\r\n            return\r\n        }\r\n        dispatch(setTasksThunk(props.id))\r\n    },[props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={(props.entityStatus === 'loading') && true}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setAppError} from \"../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n    }\r\n\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: InitialAuthStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n});\r\n\r\nexport const authReducer = authSlice.reducer\r\n\r\n\r\nexport const {setIsLoggedIn} = authSlice.actions","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport * as yup from 'yup';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../state/thunks/auth-thunks\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\ntype LoginPropsType = {}\r\n\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .max(35, 'Must be 25 characters or less')\r\n        .required('email is required')\r\n        .email('email is incorrect'),\r\n    password: yup.string()\r\n        .max(25, 'Must be 25 characters or less')\r\n        .min(5, 'Must be 5 characters or more')\r\n        .required('password is required'),\r\n});\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        validationSchema,\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginThunk(values));\r\n        },\r\n    });\r\n\r\n    const errorStyle = {\r\n        color: 'red',\r\n    }\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: vladby86@gmail.com</p>\r\n                        <p>Password: HardPassword_2020</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name={'email'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email ? (\r\n                            <div style={errorStyle}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password ? (\r\n                            <div style={errorStyle}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            name={'rememberMe'}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginType} from \"../../api/todolists-api\";\r\nimport {setIsLoggedIn} from \"../auth-reducer\";\r\nimport {setAppStatus} from \"../app-reducer\";\r\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\r\n\r\n\r\nexport const loginThunk = (data: LoginType) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        authAPI.login(data)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const logOutThunk = () => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        authAPI.logOut()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn({isLoggedIn: false}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}","import React, {useCallback} from 'react'\r\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {logOutThunk} from \"../state/thunks/auth-thunks\";\r\n\r\n\r\nexport function AppBarComponent() {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutThunk())\r\n    }, [])\r\n\r\n    return <AppBar position=\"static\">\r\n        <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n                News\r\n            </Typography>\r\n            {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {CircularProgress, Container, Grid, LinearProgress, Paper} from '@material-ui/core';\r\nimport {changeTodolistFilterAC, FilterValuesType, TodolistDomainType} from './state/todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {\r\n    createTodoListThunk,\r\n    deleteTodoListThunk,\r\n    setTodoListThunk,\r\n    updateTitleTodoListThunk\r\n} from \"./state/thunks/todolist-thunks\";\r\nimport {cteateTaskThunk, deleteTaskThunk, UpdateTaskThunk} from \"./state/thunks/tasks-thunks\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackBar\";\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport {Login} from \"./login/Login\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {initializeAppThunk} from './state/thunks/app-thunks';\r\nimport {AppBarComponent} from \"./components/AppBarComponent\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function AppWithRedux({demo = false, ...props}: AppPropsType) {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state: AppRootStateType) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitializedApp = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTodoListThunk())\r\n    }, [isLoggedIn])\r\n\r\n    //for initialization\r\n    useEffect(() => {\r\n        dispatch(initializeAppThunk())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTaskThunk(todolistId, id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(cteateTaskThunk(title, todolistId))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(UpdateTaskThunk(todolistId, id, {status}));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(UpdateTaskThunk(todolistId, id, {title: newTitle}));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, filter:value});\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodoListThunk(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTitleTodoListThunk(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodoListThunk(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isInitializedApp) {\r\n        return <div className={'app__progress_circle'}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBarComponent />\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <ErrorSnackbar/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n            {\r\n                !isLoggedIn && <Redirect to={'/login'}/>\r\n            }\r\n            <Route exact path={'/'} render={() => <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        entityStatus={tl.entityStatus}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import {todolistsAPI} from \"../../api/todolists-api\";\nimport {\n    addTodolistAC,\n    changeTodoListEntityAC,\n    changeTodolistTitleAC,\n    removeTodolistAC,\n    setTodolistAC\n} from \"../todolists-reducer\";\nimport {Dispatch} from \"redux\";\nimport {setAppStatus} from \"../app-reducer\";\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\n\ntype SetTodoListThunkType = () => Function\ntype DeleteTodoListThunkType = (todolistId: string) => Function\ntype CreateTodoListThunkType = (title: string) => Function\ntype UpdateTitleTodoListThunkType = (todolistId: string, title: string) => Function\n\nexport const setTodoListThunk: SetTodoListThunkType = () => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatus({status: 'loading'}))\n        todolistsAPI.getTodolists()\n            .then(res => {\n                dispatch(setTodolistAC({todolists: res.data}))\n                dispatch(setAppStatus({status: 'succeeded'}))\n            })\n            .catch((err) => {\n                thunkServerErrorHandler(err, dispatch)\n            })\n    }\n}\n\nexport const deleteTodoListThunk: DeleteTodoListThunkType = (todolistId) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatus({status: 'loading'}))\n        dispatch(changeTodoListEntityAC({todolistId, entityStatus: \"loading\"}))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(removeTodolistAC({todolistId}))\n                    dispatch(setAppStatus({status: 'succeeded'}))\n                } else {\n                    thunkErrorHandler(res.data, dispatch)\n                }\n            })\n            .catch(err => {\n                thunkServerErrorHandler(err, dispatch)\n            })\n\n    }\n}\nexport const createTodoListThunk: CreateTodoListThunkType = (title) => {\n\n    return async (dispatch: Dispatch) => {\n        try {\n            dispatch(setAppStatus({status: 'loading'}))\n            let res = await todolistsAPI.createTodolist(title)\n                .then(res => {\n                    dispatch(changeTodoListEntityAC({todolistId: res.data.data.item.id, entityStatus: \"loading\"}))\n                    if (res.data.resultCode === 0) {\n                        dispatch(addTodolistAC({todolist: res.data.data.item}))\n                        dispatch(setAppStatus({status: 'succeeded'}))\n                    } else {\n                        thunkErrorHandler(res.data, dispatch)\n                    }\n                })\n        } catch (err) {\n\n        }\n    }\n}\nexport const updateTitleTodoListThunk: UpdateTitleTodoListThunkType = (todolistId, title) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatus({status: 'loading'}))\n        todolistsAPI.updateTodolist(todolistId, title)\n            .then(res => {\n                debugger\n                if (res.data.resultCode === 0) {\n                    dispatch(changeTodolistTitleAC({title, id: todolistId}))\n                    dispatch(setAppStatus({status: 'succeeded'}))\n                } else {\n                    thunkErrorHandler(res.data, dispatch)\n                }\n            })\n            .catch(err => {\n                thunkServerErrorHandler(err, dispatch)\n            })\n    }\n}","import {authAPI} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedIn} from \"../auth-reducer\";\r\nimport {setAppStatus, setIsInitialized} from \"../app-reducer\";\r\nimport {thunkErrorHandler, thunkServerErrorHandler} from \"../thunksUtils/errorHandlers\";\r\n\r\n//check your authorization\r\nexport const initializeAppThunk = () => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        authAPI.auth()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    thunkErrorHandler(res.data, dispatch)\r\n                }\r\n                dispatch(setIsInitialized({value: true}))\r\n            })\r\n            .catch((err) => {\r\n                thunkServerErrorHandler(err, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n});\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}